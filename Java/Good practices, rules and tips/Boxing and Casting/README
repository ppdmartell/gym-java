/*
Unboxing and auto-boxing, as well as upcasting and downcasting, are related concepts in Java, but
they refer to different aspects of the language.

1. **Auto-boxing and Unboxing**:
- Auto-boxing: Auto-boxing is the process of automatically converting a primitive data type to its
corresponding wrapper class object. For example, when you assign a primitive `int` value to an
`Integer` object, Java automatically performs the conversion for you. This feature was introduced
in Java 5 to make working with primitive types and their corresponding wrapper classes more
convenient.

Example of auto-boxing:
int number = 42;
Integer integerValue = number; // Auto-boxing (int to Integer)

- Unboxing: Unboxing is the opposite process of auto-boxing. It involves automatically converting a
wrapper class object back to its corresponding primitive data type. When you use a wrapper class
object in a context that requires a primitive value, Java automatically extracts the primitive
value from the object.

Example of unboxing:
Integer integerValue = 100;
int number = integerValue; // Unboxing (Integer to int)



2. **Upcasting and Downcasting**:
- Upcasting: Upcasting refers to the process of treating an object of a subclass as an object of
its superclass. It's an implicit conversion where you assign an object of the subclass to a
reference variable of the superclass. Upcasting is safe because the subclass object already
possesses all the characteristics of the superclass.

Example of upcasting:
class Animal { }
class Dog extends Animal { }

Dog dog = new Dog();
Animal animal = dog; // Upcasting (Dog to Animal)

- Downcasting: Downcasting is the opposite process of upcasting. It involves explicitly converting
an object of the superclass back to an object of its subclass. Since not all superclass objects
may be of the subclass type, downcasting requires a manual cast, and it can lead to
`ClassCastException` if the actual object is not an instance of the target subclass.

Example of downcasting:
class Animal { }
class Dog extends Animal { }

Animal animal = new Dog();
Dog dog = (Dog) animal; // Downcasting (Animal to Dog)

In summary, auto-boxing and unboxing deal with the automatic conversion between primitive data
types and their wrapper classes, while upcasting and downcasting are about treating objects of
a subclass as objects of its superclass and vice versa. These concepts are essential in Java
and play a role in various programming scenarios.


Resources:
[1] https://chat.openai.com/c/16f99044-4b80-44a9-b2c5-05a1bd71a56a [search phrase: "as well as upcasting and downcasting"]
*/
